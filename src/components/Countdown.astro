---
interface Props {
  date: Date;
}

const { date } = Astro.props;
---

<div class="countdown" id="countdown" data-target-date={date}>
  <div class="prefix">The countdown has begun:</div>
  <div class="countdown-items">
    <div class="countdown-item">
      <span class="digit days">00</span>
      <span class="label">days</span>
    </div>
    <div class="countdown-item">
      <span class="digit hours">00</span>
      <span class="label">hours</span>
    </div>
    <div class="countdown-item">
      <span class="digit minutes">00</span>
      <span class="label">mins</span>
    </div>
    <div class="countdown-item">
      <span class="digit seconds">00</span>
      <span class="label">secs</span>
    </div>
  </div>
</div>

<style>
  .countdown {
    display: flex;
    flex-direction: column;
    align-items: center;
    box-shadow: 0 0 0 1px var(--color-border);
    background-color: var(--color-bg);
    padding: var(--lh);
    border-radius: 4px;
  }

  .prefix {
    margin-block-end: var(--lh);
  }

  .countdown-items {
    display: flex;
    gap: calc(var(--lh) * 0.5);
  }

  .countdown-item {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: calc(var(--lh) / 4);
  }

  .digit {
    font-family: monospace;
    font-weight: 700;
    min-width: 60px;
    text-align: center;
    box-shadow: 0 0 0 1px var(--color-border);
    background-color: var(--color-bg-contrast);
    padding: calc(var(--lh) / 2);
    border-radius: 4px;
  }

  .label {
    font-size: 12px;
    color: var(--color-fg-dim);
    text-transform: uppercase;
  }

  html.light_mode{
    .countdown {
      box-shadow: 0 0 0 1px var(--lm-color-border);
      background-color: var(--lm-color-bg);
    }
    .digit{
      box-shadow: 0 0 0 1px var(--lm-color-border);
      background-color: var(--lm-color-bg-contrast);
    }
    .label {
      color: var(--color-fg-dim);
    }
  }
</style>

<script>
  function updateCountdown() {
    const countdown = document.getElementById("countdown");
    const countdownDate = countdown?.dataset.targetDate;

    if (!countdown || !countdownDate) {
      return;
    }

    const targetDate = new Date(countdownDate).getTime();
    const now = new Date().getTime();
    const difference = targetDate - now;

    if (difference <= 0) {
      countdown?.remove();
    }

    const DAY_IN_MS = 1000 * 60 * 60 * 24;
    const HOUR_IN_MS = 1000 * 60 * 60;
    const MINUTE_IN_MS = 1000 * 60;
    const SECOND_IN_MS = 1000;

    const days = Math.floor(difference / DAY_IN_MS);
    const hours = Math.floor((difference % DAY_IN_MS) / HOUR_IN_MS);
    const minutes = Math.floor((difference % HOUR_IN_MS) / MINUTE_IN_MS);
    const seconds = Math.floor((difference % MINUTE_IN_MS) / SECOND_IN_MS);

    const elmDays = countdown.querySelector<HTMLDivElement>(".days");
    const elmHours = countdown.querySelector<HTMLDivElement>(".hours");
    const elmMinutes = countdown.querySelector<HTMLDivElement>(".minutes");
    const elmSeconds = countdown.querySelector<HTMLDivElement>(".seconds");

    if (!elmDays || !elmHours || !elmMinutes || !elmSeconds) {
      return;
    }

    elmDays.textContent = days.toString().padStart(2, "0");
    elmHours.textContent = hours.toString().padStart(2, "0");
    elmMinutes.textContent = minutes.toString().padStart(2, "0");
    elmSeconds.textContent = seconds.toString().padStart(2, "0");
  }

  updateCountdown();
  setInterval(updateCountdown, 1000);
</script>
