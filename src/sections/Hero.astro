---
import Heading from "../components/Heading.astro";

interface Props {
title: string;
description: string;
}

const { title, description } = Astro.props;
---

<section class="hero">
  <div class="hero__grid">
    <div class="hero__grid-item"></div>
    <div class="hero__grid-item"></div>
    <div class="hero__grid-item"></div>
    <div class="hero__grid-item"></div>
    <div class="hero__grid-item"></div>
    <div class="hero__grid-item"></div>
    <div class="hero__grid-item"></div>
    <div class="hero__grid-item"></div>
    <div class="hero__grid-item"></div>
    <div class="hero__grid-item"></div>
    <div class="hero__grid-item"></div>
    <div class="hero__grid-item"></div>
    <div class="hero__grid-item"></div>
    <div class="hero__grid-item"></div>
    <div class="hero__grid-item"></div>
    <div class="hero__grid-item"></div>
    <div class="hero__grid-item"></div>
    <div class="hero__grid-item"></div>
    <div class="hero__grid-item"></div>
    <div class="hero__grid-item"></div>
    <div class="hero__grid-item"></div>
    <div class="hero__grid-item"></div>
    <div class="hero__grid-item"></div>
    <div class="hero__grid-item"></div>
  </div>
  <div class="hero__inner">
    <Heading level={1} title={title} />
    <p class="hero__description">{description}</p>
    <slot />
  </div>
</section>
<style>
  .hero {
    position: relative;
    box-shadow: 0 1px 0 0 var(--color-border);
  }

  .hero__grid {
    position: absolute;
    inset: 0;
    display: grid;
    gap: 1px;
    grid-template-columns: repeat(8, 1fr);
    grid-template-rows: calc(2 * var(--lh)) 1fr calc(2 * var(--lh));
    background: var(--color-border);

    @media (800px <=width) {
      grid-template-rows: calc(5 * var(--lh)) 1fr calc(5 * var(--lh));
    }

    @media (1260px <=width) {
      grid-template-columns:
        calc((100vw - (1200px + 2 * var(--lh))) / 2) repeat(6, 1fr) calc((100vw - (1200px + 2 * var(--lh))) / 2);
    }
  }

  .hero__grid-item {
    background-color: var(--color-bg);

    &:nth-of-type(3),
    &:nth-of-type(8),
    &:nth-of-type(14),
    &:nth-of-type(17),
    &:nth-of-type(20) {
      background-color: var(--color-border);
    }
  }

  .hero__inner {
    position: relative;
    display: flex;
    flex-direction: column;
    gap: var(--lh);
    width: min(1200px, 100% - 1.5 * var(--lh));
    margin-inline: auto;
    padding-block: calc(var(--lh) * 3);

    @media (800px <=width) {
      padding-block: calc(var(--lh) * 6);
    }
  }

  .hero__description {
    max-width: 60ch;

    @media (800px <=width) {
      font-size: 18px;
    }
  }

  .hero__button {
    border-radius: 4px;
    padding: calc(var(--lh) / 2) calc(var(--lh) / 1);
    width: fit-content;
    color: var(--color-bg);
    background-color: var(--color-accent);
    text-decoration: none;
    font-weight: 600;

    &:hover {
      background-color: var(--color-accent-light);
    }
  }

  html.light_mode {
    .hero {
      box-shadow: 0 1px 0 0 var(--lm-color-border);
    }

    .hero__grid {
      background: var(--lm-color-border);
    }

    .hero__grid-item {
      background-color: var(--lm-color-bg);

      &:nth-of-type(3),
      &:nth-of-type(8),
      &:nth-of-type(14),
      &:nth-of-type(17),
      &:nth-of-type(20) {
        background-color: var(--lm-color-border);
      }
    }

    .hero__button {
      color: var(--lm-color-bg);
      background-color: var(--lm-color-accent);

      &:hover {
        background-color: var(--lm-color-accent-light);
      }
    }
  }
</style>