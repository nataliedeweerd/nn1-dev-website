---
import { Image, Picture } from "astro:assets";

interface Props {
  images: {
    src: string;
    caption: string;
  }[];
}

const { images } = Astro.props;
---

<div class="wrapper">
  <ul class="gallery">
    {
      images.map((image) => (
        <li class="gallery__item">
          <dialog class="gallery__dialog">
            <figure class="gallery__figure">
              <Picture
                src={image.src}
                formats={["avif", "webp"]}
                alt={image.caption}
                width={2400}
                height={2400}
              />
              <figcaption class="gallery__figcaption">
                {image.caption}
              </figcaption>
            </figure>
            <button class="gallery__close" title="Close image">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="gallery__close__icon"
                viewBox="0 0 512 512"
              >
                <path d="M400 145.49L366.51 112 256 222.51 145.49 112 112 145.49 222.51 256 112 366.51 145.49 400 256 289.49 366.51 400 400 366.51 289.49 256 400 145.49z" />
              </svg>
            </button>
          </dialog>
          <button class="gallery__button">
            <Image
              class="gallery__thumb"
              src={`${image.src}?w=224&h=224&fit=cover&fm=avif`}
              alt={image.caption}
              width="224"
              height="224"
            />
          </button>
        </li>
      ))
    }
  </ul>
</div>

<style>
  .wrapper {
    container-type: inline-size;
    container-name: gallery;
  }

  .gallery {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: var(--lh);
    list-style: none;

    @container (min-width: 900px) {
      grid-template-columns: repeat(8, 1fr);
    }
  }

  .gallery__button {
    border: none;
    cursor: pointer;
    border-radius: 4px;
    box-shadow: 0 0 0 4px var(--color-border);
    background: transparent;
    outline: none;
    overflow: hidden;
    aspect-ratio: 1/1;

    &:hover,
    &:focus-visible {
      .gallery__thumb {
        opacity: 1;
        filter: grayscale(0);
        scale: 1.02;
      }
    }
  }

  .gallery__thumb {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 4px;
    opacity: 0.5;
    filter: grayscale(0.75);
    transition: all 80ms;

    @media (prefers-reduced-motion) {
      transition: unset;
    }
  }

  .gallery__dialog {
    margin: auto;
    border: none;
    background: none;
    max-inline-size: min(1200px, 90dvw);
    transition:
      display 240ms allow-discrete,
      overlay 240ms allow-discrete,
      opacity 240ms;
    opacity: 0;

    @media (prefers-reduced-motion) {
      transition: unset;
    }

    &::backdrop {
      background: color-mix(in srgb, var(--color-bg), transparent 10%);
      transition:
        display 240ms allow-discrete,
        overlay 240ms allow-discrete,
        opacity 240ms;
      opacity: 0;

      @media (prefers-reduced-motion) {
        transition: unset;
      }
    }

    &[open] {
      display: flex;
      opacity: 1;

      &::backdrop {
        opacity: 1;
      }
    }

    @starting-style {
      &[open],
      &[open]::backdrop {
        opacity: 0;
      }
    }
  }

  .gallery__close {
    position: fixed;
    inset-inline-end: var(--fz);
    inset-block-start: var(--fz);
    border-radius: 4px;
    padding: calc(var(--lh) / 2);
    background-color: var(--color-accent);
    cursor: pointer;
    border: none;

    &:hover {
      background-color: var(--color-accent-light);
    }
  }

  .gallery__close__icon {
    width: var(--fz);
    display: block;
  }

  .gallery__figure {
    display: flex;
    flex-direction: column;
    gap: calc(var(--lh) / 4);

    picture {
      min-height: 0;
    }

    img {
      width: 100%;
      height: 100%;
      object-fit: contain;
    }
  }

  .gallery__figcaption {
    color: var(--color-fg);
    font-size: 0.875rem;
    text-align: center;
    font-style: italic;
  }
</style>

<script>
  const buttonsOpen = document.querySelectorAll(".gallery__button");
  const buttonsClose = document.querySelectorAll(".gallery__close");
  const dialogs =
    document.querySelectorAll<HTMLDialogElement>(".gallery__dialog");

  let currentIndex = 0;

  for (const [index, buttonOpen] of Array.from(buttonsOpen).entries()) {
    buttonOpen.addEventListener("click", (e) => {
      // @ts-ignore
      e.currentTarget.previousElementSibling.showModal();
      currentIndex = index;
    });
  }

  for (const buttonClose of buttonsClose) {
    buttonClose.addEventListener("click", (e) => {
      // @ts-ignore
      e.currentTarget.parentNode.close();
    });
  }

  /**
   * Displays an image in the modal gallery at the specified index
   */
  function showImage(index: number) {
    dialogs.forEach((dialog) => dialog.close());
    currentIndex = (index + dialogs.length) % dialogs.length;
    dialogs[currentIndex]?.showModal();
  }

  /** @heymynameisrob: Keyboard events move between images. Might be cool to preload the next one so it feels more 'instant' but not sure.  */
  document.addEventListener("keydown", (e) => {
    // Only handle keyboard events when a dialog is open
    const isDialogOpen = Array.from(dialogs).some((dialog) => dialog.open);

    if (!isDialogOpen) return;

    switch (e.key) {
      case "ArrowRight":
        e.preventDefault();
        showImage(
          e.ctrlKey || e.metaKey ? dialogs.length - 1 : currentIndex + 1,
        );
        break;
      case "ArrowLeft":
        e.preventDefault();
        showImage(e.ctrlKey || e.metaKey ? 0 : currentIndex - 1);
        break;
    }
  });
</script>
