---
import { getCollection } from "astro:content";
import Container from "../components/Container.astro";
import Heading from "../components/Heading.astro";
import Section from "../components/Section.astro";

const allEvents = await getCollection("events");

const isUpcoming = (date: Date) => new Date().getTime() < date.getTime();

const formatTime = (date: Date) =>
  new Intl.DateTimeFormat("en-GB", {
    timeZone: "Europe/London",
    weekday: "long",
    year: "numeric",
    month: "numeric",
    day: "numeric",
    hour: "numeric",
    minute: "numeric",
    hour12: false,
  }).format(date);
---

<Section style="contrast">
  <Container>
    <div class="events">
      <Heading level={2} title="Events" anchor />
      <div class="events__grid">
        {
          allEvents
            .filter(
              (event) =>
                import.meta.env.MODE === "development" || !event.data.draft,
            )
            .sort((a, b) => parseInt(b.id) - parseInt(a.id))
            .map(({ data: { id, name, description, dateStart, location } }) => {
              const isDateStartUpcoming = isUpcoming(dateStart);

              return (
                <a
                  href={`/events/${id}`}
                  class={`events__item ${isDateStartUpcoming ? "events__item--upcoming" : "events__item--past"}`}
                  data-id={id}
                >
                  <div class="events__item-content">
                    <span
                      class={
                        isUpcoming(dateStart)
                          ? "events__item-label events__item-label--active"
                          : "events__item-label"
                      }
                    >
                      {isUpcoming(dateStart) ? "Upcoming event" : "Past event"}
                    </span>
                    <h3
                      class={`events__item-name ${isUpcoming(dateStart) ? "events__item-name--upcoming" : "events__item-name--past"}`}
                    >
                      {name}
                    </h3>
                    {isDateStartUpcoming ? (
                      <>
                        <p class="events__item-description">{description}</p>
                        <ul class="events__item-list">
                          <li class="events__item-list-item">
                            <svg
                              xmlns="http://www.w3.org/2000/svg"
                              viewBox="0 0 16 16"
                              fill="currentColor"
                              class="events__item-icon"
                            >
                              <path
                                fill-rule="evenodd"
                                d="M4 1.75a.75.75 0 0 1 1.5 0V3h5V1.75a.75.75 0 0 1 1.5 0V3a2 2 0 0 1 2 2v7a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2V1.75ZM4.5 6a1 1 0 0 0-1 1v4.5a1 1 0 0 0 1 1h7a1 1 0 0 0 1-1V7a1 1 0 0 0-1-1h-7Z"
                                clip-rule="evenodd"
                              />
                            </svg>
                            <time datetime={dateStart.toISOString()}>
                              {formatTime(dateStart)}
                            </time>
                          </li>
                          <li class="events__item-list-item">
                            <svg
                              xmlns="http://www.w3.org/2000/svg"
                              viewBox="0 0 16 16"
                              fill="currentColor"
                              class="events__item-icon"
                            >
                              <path
                                fill-rule="evenodd"
                                d="m7.539 14.841.003.003.002.002a.755.755 0 0 0 .912 0l.002-.002.003-.003.012-.009a5.57 5.57 0 0 0 .19-.153 15.588 15.588 0 0 0 2.046-2.082c1.101-1.362 2.291-3.342 2.291-5.597A5 5 0 0 0 3 7c0 2.255 1.19 4.235 2.292 5.597a15.591 15.591 0 0 0 2.046 2.082 8.916 8.916 0 0 0 .189.153l.012.01ZM8 8.5a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3Z"
                                clip-rule="evenodd"
                              />
                            </svg>
                            {location}
                          </li>
                          <li class="events__item-list-item">
                            <svg
                              xmlns="http://www.w3.org/2000/svg"
                              viewBox="0 0 16 16"
                              fill="currentColor"
                              class="events__item-icon"
                            >
                              <path
                                fill-rule="evenodd"
                                d="M15 8A7 7 0 1 1 1 8a7 7 0 0 1 14 0ZM7.94 4.94c-.294.293-.44.675-.44 1.06v1.25h1.25a.75.75 0 1 1 0 1.5H7.5v1c0 .263-.045.516-.128.75h3.878a.75.75 0 0 1 0 1.5h-6.5a.75.75 0 0 1 0-1.5h.5A.75.75 0 0 0 6 9.75v-1H4.75a.75.75 0 0 1 0-1.5H6V6a3 3 0 0 1 5.121-2.121.75.75 0 1 1-1.06 1.06 1.5 1.5 0 0 0-2.121 0Z"
                                clip-rule="evenodd"
                              />
                            </svg>
                            FREE
                          </li>
                        </ul>
                        <p
                          class="events__more"
                          aria-label={`Read more ${name}`}
                        >
                          Read more Â»
                        </p>
                      </>
                    ) : null}
                  </div>
                </a>
              );
            })
        }
      </div>
    </div>
  </Container>
</Section>

<style>
  .events {
    display: flex;
    flex-direction: column;
    gap: calc(var(--lh) * 1.5);
  }

  .events__grid {
    display: grid;
    gap: var(--lh);

    @media (800px <= width) {
      grid-template-columns: repeat(3, 1fr);
    }
  }

  .events__item {
    box-shadow: 0 0 0 1px var(--color-border);
    background-color: var(--color-bg);
    padding: var(--lh);
    color: inherit;
    border-radius: 4px;
    text-decoration: none;
    display: flex;
    flex-direction: column;
    gap: calc(var(--lh) * 0.75);

    &:hover {
      box-shadow: 0 0 0 1px var(--color-accent);
      color: var(--color-accent);
    }
  }

  .events__item--upcoming {
    &::before {
      display: none;

      @media (800px <= width) {
        content: "#" attr(data-id);
        display: block;
        position: absolute;
        bottom: -150px;
        right: -50px;
        font-weight: 900;
        font-size: 720px;
        line-height: 720px;
        color: var(--color-border);
        opacity: 0.5;
      }
    }
    @media (800px <= width) {
      grid-column: 1 / span 3;
      position: relative;
      overflow: clip;
    }
  }

  .events__item-name {
    max-width: 60ch;
  }

  .events__item-name--past {
    font-size: 1rem;
  }

  .events__item-content {
    display: flex;
    flex-direction: column;
    gap: calc(var(--lh) * 0.75);
    position: relative;
  }

  .events__item-id {
  }

  .events__item-description {
    max-width: 80ch;
  }

  .events__day-description {
    max-width: 80ch;
  }

  .events__item-label {
    position: relative;
    display: inline-block;
    box-shadow: inset 0 0 0 1px var(--color-border);
    background-color: var(--color-bg-contrast);
    border-radius: 4px;
    padding-block: calc(var(--lh) / 4);
    padding-inline-start: calc(var(--lh) * 1.25);
    padding-inline-end: calc(var(--lh) / 2);
    font-size: calc(var(--fz) * 0.875);
    width: fit-content;

    &::before,
    &::after {
      position: absolute;
      left: calc(var(--lh) / 2);
      top: calc(50% - 5px);
      content: "";
      width: 10px;
      height: 10px;
      background-color: var(--color-border);
      border-radius: 50%;
    }
  }

  @keyframes pulse {
    50% {
      transform: scale(1);
      opacity: 1;
    }
    100% {
      transform: scale(3);
      opacity: 0;
    }
  }

  .events__item-label--active {
    &::before,
    &::after {
      background-color: var(--color-accent);
    }
    &::after {
      animation: pulse 2s infinite;
    }
    @media (prefers-reduced-motion) {
      &::after {
        animation: none;
      }
    }
  }

  .events__item-list {
    list-style: none;
    font-size: calc(var(--fz) * 0.875);
  }

  .events__item-list-item {
    display: flex;
    align-items: start;
    gap: calc(var(--lh) / 2);
  }

  .events__item-icon {
    width: calc(var(--lh) * 0.5);
    height: calc(var(--lh));
    opacity: 0.5;
    flex-shrink: 0;
  }

  .events__more {
    color: var(--color-accent);
    text-decoration: underline;
    font-size: calc(var(--fz) * 0.875);
  }

  html.light_mode{
    .events__item {
      box-shadow: 0 0 0 1px var(--lm-color-border);
      background-color: var(--lm-color-bg);
      &:hover {
        box-shadow: 0 0 0 1px var(--lm-color-accent);
        color: var(--lm-color-accent);
      }
    }
    .events__item--upcoming {
      &::before {   
        @media (800px <= width) {
          color: var(--lm-color-border);
        }
      }
    }

    .events__item-label {
      box-shadow: inset 0 0 0 1px var(--lm-color-border);
      background-color: var(--lm-color-bg-contrast);
      &::before,
      &::after {
          background-color: var(--lm-color-border);
      }
    }

    .events__item-label--active {
      &::before,
      &::after {
        background-color: var(--lm-color-accent);
      }
    }

    .events__more {
      color: var(--lm-color-accent);
    }
}
</style>
